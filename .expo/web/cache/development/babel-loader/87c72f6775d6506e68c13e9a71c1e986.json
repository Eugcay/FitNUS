{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nimport firebase from \"firebase\";\nimport { SET_USER, UPDATE_USER, SET_USER_HISTORY, ADD_WORKOUT, CLEAR } from \"./types\";\nexport function getUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        dispatch({\n          type: SET_USER,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log(\"No such user\");\n      }\n    });\n  };\n}\nexport function updateUser(name, email, bio, photoURL, caloriesGoal, durationGoal, distanceGoal, workoutGoal) {\n  var user = {\n    name: name,\n    email: email,\n    bio: bio,\n    photoURL: photoURL,\n    caloriesGoal: caloriesGoal,\n    durationGoal: durationGoal,\n    distanceGoal: distanceGoal,\n    workoutGoal: workoutGoal\n  };\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).set(user));\n\n          case 2:\n            dispatch({\n              type: UPDATE_USER,\n              currentUser: user\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n}\nexport function getUserHistory() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).collection(\"history\").orderBy(\"date\", \"desc\").get().then(function (snapshot) {\n      var hist = [];\n      snapshot.docs.forEach(function (doc) {\n        return doc.data().workoutRef.get().then(function (snap) {\n          return hist.push({\n            id: doc.id,\n            date: doc.data().date,\n            workout: snap.data(),\n            calories: doc.data().calories,\n            duration: doc.data().duration\n          });\n        });\n      });\n      return hist;\n    }).then(function (hist) {\n      return dispatch({\n        type: SET_USER_HISTORY,\n        history: hist\n      });\n    });\n  };\n}\nexport function addToHistory(workoutId, calories, duration, workoutData) {\n  return function _callee2(dispatch) {\n    var workoutRef;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            workoutRef = \"/Workout/\" + workoutId;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).collection(\"history\").add({\n              date: Date.now(),\n              workoutRef: workoutRef,\n              calories: calories,\n              duration: duration\n            }));\n\n          case 3:\n            dispatch({\n              type: ADD_WORKOUT,\n              data: {\n                date: Date.now(),\n                workoutData: workoutData,\n                calories: calories,\n                duration: duration\n              }\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n}\nexport var clearData = function clearData() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR\n    });\n  };\n};","map":{"version":3,"sources":["D:/CS Projects/FitNUS Git/FitNUS/store/actions/user.js"],"names":["React","firebase","SET_USER","UPDATE_USER","SET_USER_HISTORY","ADD_WORKOUT","CLEAR","getUser","dispatch","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","exists","type","data","console","log","updateUser","name","email","bio","photoURL","caloriesGoal","durationGoal","distanceGoal","workoutGoal","user","set","getUserHistory","orderBy","hist","docs","forEach","workoutRef","snap","push","id","date","workout","calories","duration","history","addToHistory","workoutId","workoutData","add","Date","now","clearData"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport firebase from \"firebase\";\r\n\r\nimport {\r\n  SET_USER,\r\n  UPDATE_USER,\r\n  SET_USER_HISTORY,\r\n  ADD_WORKOUT,\r\n  CLEAR,\r\n} from \"./types\";\r\n\r\nexport function getUser() {\r\n  return (dispatch) => {\r\n    firebase\r\n      .firestore()\r\n      .collection(\"users\")\r\n      .doc(firebase.auth().currentUser.uid)\r\n      .get()\r\n      .then((snapshot) => {\r\n        if (snapshot.exists) {\r\n          dispatch({ type: SET_USER, currentUser: snapshot.data() });\r\n        } else {\r\n          console.log(\"No such user\");\r\n        }\r\n      });\r\n  };\r\n}\r\n\r\nexport function updateUser(\r\n  name,\r\n  email,\r\n  bio,\r\n  photoURL,\r\n  caloriesGoal,\r\n  durationGoal,\r\n  distanceGoal,\r\n  workoutGoal\r\n) {\r\n  const user = {\r\n    name,\r\n    email,\r\n    bio,\r\n    photoURL,\r\n    caloriesGoal,\r\n    durationGoal,\r\n    distanceGoal,\r\n    workoutGoal\r\n  };\r\n  return async (dispatch) => {\r\n    await firebase\r\n      .firestore()\r\n      .collection(\"users\")\r\n      .doc(firebase.auth().currentUser.uid)\r\n      .set(user);\r\n\r\n    dispatch({ type: UPDATE_USER, currentUser: user });\r\n  };\r\n}\r\n\r\nexport function getUserHistory() {\r\n  return (dispatch) => {\r\n    firebase\r\n      .firestore()\r\n      .collection(\"users\")\r\n      .doc(firebase.auth().currentUser.uid)\r\n      .collection(\"history\")\r\n      .orderBy(\"date\", \"desc\")\r\n      .get()\r\n      .then((snapshot) => {\r\n        const hist = [];\r\n        snapshot.docs.forEach((doc) =>\r\n          doc\r\n            .data()\r\n            .workoutRef.get()\r\n            .then((snap) =>\r\n              hist.push({\r\n                id: doc.id,\r\n                date: doc.data().date,\r\n                workout: snap.data(),\r\n                calories: doc.data().calories,\r\n                duration: doc.data().duration,\r\n              })\r\n            )\r\n        );\r\n        return hist;\r\n      })\r\n      .then((hist) => dispatch({ type: SET_USER_HISTORY, history: hist }));\r\n  };\r\n}\r\n\r\nexport function addToHistory(workoutId, calories, duration, workoutData) {\r\n  return async (dispatch) => {\r\n    const workoutRef = `/Workout/${workoutId}`;\r\n    await firebase\r\n      .firestore()\r\n      .collection(\"users\")\r\n      .doc(firebase.auth().currentUser.uid)\r\n      .collection(\"history\")\r\n      .add({\r\n        date: Date.now(),\r\n        workoutRef,\r\n        calories,\r\n        duration,\r\n      });\r\n\r\n    dispatch({\r\n      type: ADD_WORKOUT,\r\n      data: {\r\n        date: Date.now(),\r\n        workoutData,\r\n        calories,\r\n        duration,\r\n      },\r\n    });\r\n  };\r\n}\r\n\r\nexport const clearData = () => {\r\n  return (dispatch) => {\r\n    dispatch({ type: CLEAR });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}