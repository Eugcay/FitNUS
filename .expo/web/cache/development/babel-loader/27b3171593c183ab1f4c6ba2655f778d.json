{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\CS Projects\\\\FitNUS Git\\\\FitNUS\\\\components\\\\Donut.js\";\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Svg, { G, Circle } from \"react-native-svg\";\nvar ProgressCircle = Animated.createAnimatedComponent(Circle);\nvar AnimatedTextValue = Animated.createAnimatedComponent(TextInput);\n\nvar Donut = function Donut(props) {\n  var val = props.val;\n  var color = props.color ? props.color : \"#0B2A59\";\n  var max = props.max;\n  var units = props.units;\n  var RADIUS = 130;\n  var STROKEWIDTH = 20;\n  var animationValue = useRef(new Animated.Value(0)).current;\n  var circ = useRef();\n  var input = useRef();\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      textStyle = _useState2[0],\n      setTextStyle = _useState2[1];\n\n  var half = RADIUS + STROKEWIDTH;\n  var circumference = 2 * Math.PI * RADIUS;\n\n  var animate = function animate(toValue) {\n    return Animated.timing(animationValue, {\n      toValue: toValue,\n      duration: 500,\n      delay: 200,\n      useNativeDriver: true,\n      easing: Easing.out(Easing.ease)\n    }).start();\n  };\n\n  useEffect(function () {\n    animate(val);\n    animationValue.addListener(function (v) {\n      if (circ != null && circ.current) {\n        var strokeDashoffset = v.value < max ? circumference - v.value / max * circumference : 0;\n        circ.current.setNativeProps({\n          strokeDashoffset: strokeDashoffset\n        });\n      }\n\n      if (input != null && input.current) {\n        if (v.value > max) {\n          setTextStyle({\n            color: \"#0B2A59\",\n            fontWeight: \"bold\",\n            textShadowColor: \"gold\",\n            textShadowOffset: {\n              width: -1,\n              height: 1\n            },\n            textShadowRadius: 10\n          });\n        }\n\n        input.current.setNativeProps({\n          text: (units !== \"km\" ? Math.round(v.value) : v.value.toFixed(2)) + \" \" + units\n        });\n      }\n    });\n  }, []);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, React.createElement(Svg, {\n    width: half * 2,\n    height: half * 2,\n    viewBox: \"0 0 \" + half * 2 + \" \" + half * 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, React.createElement(G, {\n    rotation: \"-90\",\n    origin: half + \", \" + half,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, React.createElement(Circle, {\n    cx: \"50%\",\n    cy: \"50%\",\n    stroke: color,\n    strokeWidth: STROKEWIDTH,\n    r: RADIUS,\n    strokeOpacity: 0.2,\n    fill: \"transparent\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }), React.createElement(ProgressCircle, {\n    ref: circ,\n    cx: \"50%\",\n    cy: \"50%\",\n    stroke: color,\n    strokeWidth: STROKEWIDTH,\n    r: RADIUS,\n    strokeOpacity: 0.8,\n    fill: \"transparent\",\n    strokeDasharray: circumference,\n    strokeDashoffset: circumference,\n    strokeLinecap: \"round\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }))), React.createElement(AnimatedTextValue, {\n    ref: input,\n    underlineColorAndroid: \"transparent\",\n    defaultValue: \"0\",\n    style: [StyleSheet.absoluteFillObject, {\n      textAlign: 'center',\n      fontSize: 20\n    }, textStyle],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, \"out of \", max));\n};\n\nexport default Donut;\nvar styles = StyleSheet.create({\n  container: {\n    marginTop: 10,\n    marginBottom: 20,\n    alignItems: \"center\",\n    position: \"relative\"\n  },\n  innercircle: {\n    position: \"absolute\",\n    alignItems: \"center\",\n    left: \"0.5\"\n  },\n  bigwords: {\n    textAlign: \"center\"\n  },\n  smallwords: {\n    textAlign: \"center\"\n  },\n  specialwords: {\n    textAlign: \"center\"\n  },\n  specialbox: {\n    alignSelf: \"center\"\n  }\n});","map":{"version":3,"sources":["D:/CS Projects/FitNUS Git/FitNUS/components/Donut.js"],"names":["React","useEffect","useRef","useState","Svg","G","Circle","ProgressCircle","Animated","createAnimatedComponent","AnimatedTextValue","TextInput","Donut","props","val","color","max","units","RADIUS","STROKEWIDTH","animationValue","Value","current","circ","input","textStyle","setTextStyle","half","circumference","Math","PI","animate","toValue","timing","duration","delay","useNativeDriver","easing","Easing","out","ease","start","addListener","v","strokeDashoffset","value","setNativeProps","fontWeight","textShadowColor","textShadowOffset","width","height","textShadowRadius","text","round","toFixed","styles","container","StyleSheet","absoluteFillObject","textAlign","fontSize","create","marginTop","marginBottom","alignItems","position","innercircle","left","bigwords","smallwords","specialwords","specialbox","alignSelf"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { View, Text, Easing, Animated, TextInput, StyleSheet } from \"react-native\";\r\nimport Svg, { G, Circle } from \"react-native-svg\";\r\n\r\n\r\n\r\nconst ProgressCircle = Animated.createAnimatedComponent(Circle);\r\nconst AnimatedTextValue = Animated.createAnimatedComponent(TextInput)\r\n\r\nconst Donut = (props) => {\r\n  const val = props.val;\r\n  const color = props.color ? props.color : \"#0B2A59\";\r\n  const max = props.max;\r\n  const units = props.units;\r\n\r\n  const RADIUS = 130;\r\n  const STROKEWIDTH = 20;\r\n//   const DURATION = \"50\"; //seconds to mins\r\n//   const WORKOUT = \"Boxing\"; //Change to workout object from database\r\n//   //const WORKOUTNAME = \"Name\";\r\n//   const UNITS = \"minuites\";\r\n//   const CALORIES = \"500Kcal\";\r\n//   const DISTANCE = \"5KM\"\r\n\r\n  const animationValue = useRef(new Animated.Value(0)).current;\r\n  const circ = useRef();\r\n  const input = useRef()\r\n  const [textStyle, setTextStyle] = useState({})\r\n\r\n  const half = RADIUS + STROKEWIDTH;\r\n  const circumference = 2 * Math.PI * RADIUS;\r\n\r\n  const animate = (toValue) => {\r\n    return Animated.timing(animationValue, {\r\n      toValue,\r\n      duration: 500,\r\n      delay: 200,\r\n      useNativeDriver: true,\r\n      easing: Easing.out(Easing.ease)\r\n    }).start();\r\n  };\r\n\r\n  useEffect(() => {\r\n    \r\n    animate(val);\r\n\r\n    animationValue.addListener((v) => {\r\n      if (circ?.current) {\r\n        const strokeDashoffset = v.value < max \r\n          ? circumference - (v.value / max) * circumference\r\n          : 0;\r\n        circ.current.setNativeProps({\r\n          strokeDashoffset,\r\n        });\r\n      }\r\n      if (input?.current) {\r\n        if (v.value > max) {\r\n          setTextStyle({color:\"#0B2A59\", fontWeight:\"bold\", textShadowColor: \"gold\", textShadowOffset: {width: -1, height: 1},\r\n          textShadowRadius: 10})\r\n        }\r\n          input.current.setNativeProps({\r\n              text: `${units !== \"km\" ? (Math.round(v.value)) : (v.value.toFixed(2))} ${units}`,\r\n          })\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Svg\r\n        width={half * 2}\r\n        height={half * 2}\r\n        viewBox={`0 0 ${half * 2} ${half * 2}`}\r\n      >\r\n        <G rotation=\"-90\" origin={`${half}, ${half}`}>\r\n          <Circle\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            stroke={color}\r\n            strokeWidth={STROKEWIDTH}\r\n            r={RADIUS}\r\n            strokeOpacity={0.2}\r\n            fill=\"transparent\"\r\n          />\r\n\r\n          <ProgressCircle\r\n            ref={circ}\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            stroke={color}\r\n            strokeWidth={STROKEWIDTH}\r\n            r={RADIUS}\r\n            strokeOpacity={0.8}\r\n            fill=\"transparent\"\r\n            strokeDasharray={circumference}\r\n            strokeDashoffset={circumference}\r\n            strokeLinecap=\"round\"\r\n          />\r\n        </G>\r\n      </Svg>\r\n      <AnimatedTextValue\r\n        ref={input}\r\n        underlineColorAndroid='transparent'\r\n        defaultValue='0'\r\n        style={[StyleSheet.absoluteFillObject, {textAlign: 'center', fontSize: 20,}, textStyle]}\r\n      />\r\n    <Text>out of {max}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Donut;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    marginTop: 10,\r\n    marginBottom: 20,\r\n    alignItems: \"center\",\r\n    position: \"relative\",\r\n  },\r\n  innercircle: {\r\n    position: \"absolute\",\r\n    alignItems: \"center\",\r\n    left: \"0.5\"\r\n  },\r\n  bigwords: {\r\n    textAlign: \"center\"\r\n  },\r\n  smallwords: {\r\n    textAlign: \"center\"\r\n  },\r\n  specialwords:{\r\n    textAlign: \"center\"\r\n  },\r\n  specialbox: {\r\n    alignSelf: \"center\"\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}